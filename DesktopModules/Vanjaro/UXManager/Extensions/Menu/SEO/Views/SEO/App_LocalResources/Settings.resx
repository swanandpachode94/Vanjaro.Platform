<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddGroup.Text" xml:space="preserve">
    <value>Add Group</value>
  </data>
  <data name="AddQueryString.Text" xml:space="preserve">
    <value>Add Query String (optional)</value>
  </data>
  <data name="AddWord.Text" xml:space="preserve">
    <value>Add Word</value>
  </data>
  <data name="AdvanceSetting.Text" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="AllSynonymsGroups_Columns_SynonymsTags.Text" xml:space="preserve">
    <value> </value>
  </data>
  <data name="AuthorBoost.Text" xml:space="preserve">
    <value>Author Boost</value>
  </data>
  <data name="Back.Text" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Basic.Text" xml:space="preserve">
    <value>Basic Settings</value>
  </data>
  <data name="ButtonTestURL.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="CacheClear.Text" xml:space="preserve">
    <value>Cache cleared successfully.</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ClearCache.Text" xml:space="preserve">
    <value>Clear Cache</value>
  </data>
  <data name="CompactIndex.Text" xml:space="preserve">
    <value>Compact Index</value>
  </data>
  <data name="CompactIndexConfirm.Text" xml:space="preserve">
    <value>Compacting Index can be CPU consuming and may require twice the space of the current Index Store for processing. Compacting is done by site search crawler and depends on its scheduling frequency. Are you sure you want to continue?</value>
  </data>
  <data name="Confirm.Text" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="ContentBoost.Text" xml:space="preserve">
    <value>Content Boost</value>
  </data>
  <data name="Culture.Text" xml:space="preserve">
    <value>Identified Language / Culture</value>
  </data>
  <data name="CustomAnalyzer.Text" xml:space="preserve">
    <value>Custom Analyzer Type</value>
  </data>
  <data name="CustomPageName.Text" xml:space="preserve">
    <value>Custom Page Name / URL End String (optional)</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeletedPageHandling.OFF" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="DeletedPageHandling.ON" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="DeletedPageHandling.Text" xml:space="preserve">
    <value>Redirect deleted, expired, disabled pages to Homepage</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DescriptionBoost.Text" xml:space="preserve">
    <value>Description Boost</value>
  </data>
  <data name="DoNotIncludeInPathRegex.Text" xml:space="preserve">
    <value>Keep in Querystring Regular Expression</value>
  </data>
  <data name="DoNotRedirectRegex.Text" xml:space="preserve">
    <value>Do Not Redirect URL Regular Expression</value>
  </data>
  <data name="DoNotRedirectSecureRegex.Text" xml:space="preserve">
    <value>Do Not Redirect Https URL Regular Expression</value>
  </data>
  <data name="DoNotRewriteRegex.Text" xml:space="preserve">
    <value>Do Not Rewrite URL Regular Expression</value>
  </data>
  <data name="Expressions.Text" xml:space="preserve">
    <value>Expressions</value>
  </data>
  <data name="ForceLowerCaseRegex.Text" xml:space="preserve">
    <value>Prevent Lowercase URL Regular Expression</value>
  </data>
  <data name="HostSearchIndex.Text" xml:space="preserve">
    <value>Re-Index Host Content</value>
  </data>
  <data name="HostSearchIndexConfirm.Text" xml:space="preserve">
    <value>Re-Index will cause existing content in the Index Store to be deleted. Re-index is done by search crawler(s) and depends on their scheduling frequency. Are you sure you want to continue?</value>
  </data>
  <data name="HTMLPageHeader.Text" xml:space="preserve">
    <value>HTML Page Header Tags</value>
  </data>
  <data name="IdentifiedPage.Text" xml:space="preserve">
    <value>Identified Page</value>
  </data>
  <data name="IgnoreRegex.Text" xml:space="preserve">
    <value>Ignore URL Regular Expression</value>
  </data>
  <data name="IgnoreWord.Text" xml:space="preserve">
    <value>Ignore Word</value>
  </data>
  <data name="IgnoreWordAddSuccess.Text" xml:space="preserve">
    <value>Ignore Word has been updated.</value>
  </data>
  <data name="IgnoreWords.Text" xml:space="preserve">
    <value>Ignore Words</value>
  </data>
  <data name="IgnoreWord_Columns_Actions.Text" xml:space="preserve">
    <value> </value>
  </data>
  <data name="IgnoreWord_Columns_StopWord.Text" xml:space="preserve">
    <value>Ignore Word</value>
  </data>
  <data name="IgnoreWord_Search.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Keywords.Text" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="MaximumLength.Text" xml:space="preserve">
    <value>Maximum Word Length</value>
  </data>
  <data name="MinimumLength.Text" xml:space="preserve">
    <value>Minimum Word Length</value>
  </data>
  <data name="NoFriendlyUrlRegex.Text" xml:space="preserve">
    <value>Do Not Use Friendly URLs Regular Expression</value>
  </data>
  <data name="OperationMessages.Text" xml:space="preserve">
    <value>Operation Messages</value>
  </data>
  <data name="PageToTest.Text" xml:space="preserve">
    <value>Page to Test</value>
  </data>
  <data name="PartialWord.OFF" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="PartialWord.ON" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="PartialWord.Text" xml:space="preserve">
    <value>Enable Partial-Word Search (Slow)</value>
  </data>
  <data name="RedirectionReason.Text" xml:space="preserve">
    <value>Redirection Reason</value>
  </data>
  <data name="RedirectionResult.Text" xml:space="preserve">
    <value>Redirection Result</value>
  </data>
  <data name="RegexMatch.Text" xml:space="preserve">
    <value>Valid Friendly URL Regular Expression</value>
  </data>
  <data name="ReIndex.Text" xml:space="preserve">
    <value>Re-Index Content</value>
  </data>
  <data name="ReIndexConfirm.Text" xml:space="preserve">
    <value>Re-Index will cause existing content in the Index Store to be deleted. Re-index is done by search crawler(s) and depends on their scheduling frequency. Are you sure you want to continue?</value>
  </data>
  <data name="ResultingURLs.Text" xml:space="preserve">
    <value>Resulting URLs</value>
  </data>
  <data name="RewritingResult.Text" xml:space="preserve">
    <value>Rewriting Result</value>
  </data>
  <data name="SearchIndex.Text" xml:space="preserve">
    <value>Search Index</value>
  </data>
  <data name="SearchPriorities.Text" xml:space="preserve">
    <value>Search Priorities</value>
  </data>
  <data name="SelectOption.Text" xml:space="preserve">
    <value>&lt; None Specified &gt;</value>
  </data>
  <data name="SEOSettings.Text" xml:space="preserve">
    <value>SEO</value>
  </data>
  <data name="Site.Text" xml:space="preserve">
    <value>Site</value>
  </data>
  <data name="Sitemap.Text" xml:space="preserve">
    <value>Sitemap</value>
  </data>
  <data name="SitemapCacheDays.Text" xml:space="preserve">
    <value>Days to Cache Sitemap For</value>
  </data>
  <data name="SitemapExcludePriority.Text" xml:space="preserve">
    <value>Exclude URLs With a Priority Lower Than</value>
  </data>
  <data name="SitemapIncludeHidden.OFF" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="SitemapIncludeHidden.ON" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="SitemapIncludeHidden.Text" xml:space="preserve">
    <value>Include Hidden Pages</value>
  </data>
  <data name="SitemapLevelMode.OFF" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="SitemapLevelMode.ON" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="SitemapLevelMode.Text" xml:space="preserve">
    <value>Use Page Level Based Priorities</value>
  </data>
  <data name="SitemapMinPriority.Text" xml:space="preserve">
    <value>Minimum Priority for Pages</value>
  </data>
  <data name="SitemapUrl.Text" xml:space="preserve">
    <value>Sitemap URL</value>
  </data>
  <data name="SiteSearch.Text" xml:space="preserve">
    <value>Site Search</value>
  </data>
  <data name="SiteSetting.Text" xml:space="preserve">
    <value>Site</value>
  </data>
  <data name="SiteTitle.Text" xml:space="preserve">
    <value>Site Title</value>
  </data>
  <data name="Synonyms.Text" xml:space="preserve">
    <value>Synonyms</value>
  </data>
  <data name="SynonymsGroup.Text" xml:space="preserve">
    <value>Synonyms Group</value>
  </data>
  <data name="SynonymsGroupCreateSuccess.Text" xml:space="preserve">
    <value>The synonyms group has been added.</value>
  </data>
  <data name="SynonymsGroupDeletedWarning.Text" xml:space="preserve">
    <value>Are you sure you want to delete this synonyms group?</value>
  </data>
  <data name="SynonymsGroupDeleteSuccess.Text" xml:space="preserve">
    <value>The synonyms group has been deleted.</value>
  </data>
  <data name="SynonymsGroups.Text" xml:space="preserve">
    <value>SynonymsGroups</value>
  </data>
  <data name="SynonymsGroupUpdateSuccess.Text" xml:space="preserve">
    <value>The synonyms group has been updated.</value>
  </data>
  <data name="TagBoost.Text" xml:space="preserve">
    <value>Tag Boost</value>
  </data>
  <data name="TestURL.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="TestURLRewriting.Text" xml:space="preserve">
    <value>Test URL Rewriting</value>
  </data>
  <data name="TitleBoost.Text" xml:space="preserve">
    <value>Title Boost</value>
  </data>
  <data name="Update.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="URLRedirects.Text" xml:space="preserve">
    <value>URL Redirects</value>
  </data>
  <data name="URLRewriting.Text" xml:space="preserve">
    <value>Test URL Rewriting</value>
  </data>
  <data name="URLs.Text" xml:space="preserve">
    <value>URLs</value>
  </data>
  <data name="URLToTest.Text" xml:space="preserve">
    <value>URL to Test</value>
  </data>
  <data name="UseSiteUrlsRegex.Text" xml:space="preserve">
    <value>Site URLs Only Regular Expression</value>
  </data>
  <data name="ValidExtensionlessUrlsRegex.Text" xml:space="preserve">
    <value>URLs With No Extension Regular Expression</value>
  </data>
  <data name="Yes.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>